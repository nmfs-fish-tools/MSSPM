/**
 * @file BeesStats.h
 * @brief Class definition for the BeesStats structure
 *
 * This file contains the class definition for the BeesStats structure. This
 * structure contains the variables necessary to run an Estimation using the
 * Bees Algorithm.
 *
 * @copyright
 * Public Domain Notice\n
 *
 * National Oceanic And Atmospheric Administration\n\n
 *
 * This software is a "United States Government Work" under the terms of the
 * United States Copyright Act.  It was written as part of the author's official
 * duties as a United States Government employee/contractor and thus cannot be copyrighted.
 * This software is freely available to the public for use. The National Oceanic
 * And Atmospheric Administration and the U.S. Government have not placed any
 * restriction on its use or reproduction.  Although all reasonable efforts have
 * been taken to ensure the accuracy and reliability of the software and data,
 * the National Oceanic And Atmospheric Administration and the U.S. Government
 * do not and cannot warrant the performance or results that may be obtained
 * by using this software or data. The National Oceanic And Atmospheric
 * Administration and the U.S. Government disclaim all warranties, express
 * or implied, including warranties of performance, merchantability or fitness
 * for any particular purpose.\n\n
 *
 * Please cite the author(s) in any work or product based on this material.
 */

#ifndef BEESSTATS_H
#define BEESSTATS_H

#include <cmath>
#include <vector>
#include <iostream>

/**
 * @brief Bees Statistics Class
 *
 * This class holds the statistics generated by a run of the Bees algorithm.
 *
 */
class BeesStats
{
private:
    int                               m_totalParameters;
    int                               m_numRuns;
    double                            m_sumFitness;
    double                            m_meanFitness;
    std::vector<double>               m_sumData;
    std::vector<double>               m_fitnessData;
    std::vector<double>               m_meanData;
    std::vector<double>               m_stdDev;
    std::vector<std::vector<double> > m_data;

public:
    /**
     * @brief Class constructor
     * @param totParameters : total number of parameters
     * @param numRuns : total number of runs
     */
    BeesStats(const int& totParameters,
              const int& numRuns);
   ~BeesStats() {}

    /**
     * @brief Loads data into the private data members
     * @param bestFitness : best fitness value to load
     * @param parameters : list of parameter values to load
     */
    void addData(const double& bestFitness,
                 const std::vector<double>& parameters);
    /**
     * @brief Finds the mean fitness value
     * @param fitness : the mean fitness value
     * @param parameters : vector of mean estimated parameter values
     */
    void getMean(double& fitness,
                 std::vector<double>& parameters);
    /**
     * @brief Gets the standard deviation of each of the parameter values
     * @param fitnessStdDev : the fitness standard deviation
     * @param totStdDev : the total standard deviation
     * @param stdDevParameters : the standard deviation of each of the estimated parameters
     */
    void getStdDev(double& fitnessStdDev,
                   double& totStdDev,
                   std::vector<double>& stdDevParameters);

};

#endif
